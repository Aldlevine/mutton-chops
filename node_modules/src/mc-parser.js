var _ = require('lodash')
  , htmlparser = require('htmlparser')
  , MCUtils = require('src/mc-utils')
  , MCChunk = require('src/mc-chunk')
;

module.exports = (function(){

  /**
   * @class MCParser
   * @param {Object|Function} opts
   */
  function MCParser(opts)
  {
    var opts = MCUtils.defaults({}, opts);
  }

  /**
   * Creates an object containing the MuttonChops hierarchy.
   * Follows HTML hierarchy, but takes it a step further with MC syntax
   *
   * @function MCParser#generateMCDOM
   * @param {string} str
   * @returns {Object|Object[]}
   *
   * @TODO Build method
   * @TODO Write unit test
   */
  MCParser.prototype.generateMCDOM = function (str) {

  };

  /**
   * Parses a DOM text node value into a MCDOM hierarchy
   *
   * @function MCParser#parseTextNode
   * @param {string} str
   * @returns {Object|Object[]}
   *
   * @TODO Write unit test
   */
  MCParser.prototype.parseTextNode = function (str) {
    var charBuf = str.split('')
      , charLast = null
      , charLast2 = null
      , charCur
      , isInMC = false
      , isInMCStr = false
      , chunkCur = ''
      , chunks = []
    ;

    for(;;)
    {
      charLast2 = charLast;
      charLast = charCur;
      charCur = charBuf.shift();

      if(!charCur)
      {
        // EOF
        if( chunkCur.length ) chunks.push(chunkCur);
        break;
      }

      if( !isInMC )
      {
        if( charCur == '{' && charLast == '{' )
        {
          // Found beginning of an MCChunk
          isInMC = true;
          if( chunkCur.length ) chunks.push(chunkCur)
          chunkCur = '';
          continue;
        }
        else if( charCur == '{' && charBuf[0] == '{' )
        {
          // Next iteration will be beginning of MCChunk
          continue;
        }
        else
        {
          // Push character
          chunkCur += charCur;
        }
      }
      else
      {
        if( !isInMCStr && charCur == '}' && charLast == '}' )
        {
          // Found end of MCChunk
          isInMC = false;
          chunks.push( new MCChunk(chunkCur) );
          chunkCur = '';
          continue;
        }
        else if( charCur == '}' && charBuf[0] == '}' )
        {
          // Next iteration will be end of MCChunk
          continue;
        }
        else {
          // Push character
          chunkCur += charCur;
        }
      }
    }

    return chunks;
  };

  return MCParser;

})();
